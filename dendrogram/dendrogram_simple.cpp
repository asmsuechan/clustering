#include<iostream>
#include<math.h>
#include<vector>
using namespace std;

//#define N 18
#define N 6
#define M 3
//Mは次元

double dist(double x1[M],double x2[M]);
void center(double x1[M],double x2[M],double pos[N]);
int parent(int c,double CL[N*2-1][4],double D[N][M]);
void dendrogram(double CL[N*2-1][4],double pos[N*2][M],double min_dist);
void cut(int C[N],double CL[N*2-1][4],double D[N][M]);

int main(void){
  //int class1[];
  //int class2[];
  //int D[N]={3,1,8,13,5,12};
  //int D[N]={3,1,6,13,20,12};
  //double D[N]={3,1,6,13,20,12};
  double D[N][M]={{3,2,5},{1,13,7},{3,6,13},{1,13,7},{3,2,5},{5,12,6}};
  //double D[N]={3,1,6,13,19,12};
  //double D[N][M]={3,1,6,13,19,12};
  //int D[N]={1,2,3,4,5,6};
  //int D[N]={3,7,12,100,23,35};
  //int D[N]={100,85,5,87,81,82,4,1,3,6,7,8,3,1,2,20,4,100};
  //double D[N][M]={6,13,5,85,22,42,68,52,28,26,62,34,28,11,2,31,37,14,77,47,18,53,98,73,50,80,19,44,35,42,14,89,23,71,8,73,67,70,64,84,19,6,12,7,32,40,56,15,84,62,30,95,82,13,80,100,1,91,99,85,98,3,77,23,54,20,87,67,55,32,17,81,48,24,96,83,48,15,47,15,3,21,72,95,67,68,3,56,57,83,28,55,12,64,67,37,42,81,21,44};
  //double D[N][M]={999,1004,1235,1357,1762,395,1072,476,1961,589,1087,1349,817,376,1934,916,1906,602,716,1543,1668,445,274,1989,1432,544,602,1293,784,1594,1493,1057,838,530,75,150,77,798,1719,384,1017,1502,431,394,510,1103,1814,281,506,1008,1465,818,1915,1241,994,610,1433,1873,1912,388,1488,958,1222,1687,50,1051,1297,1858,1645,1967,71,939,1012,242,372,1378,332,11,966,1949,874,1407,1073,1220,495,104,1014,1303,408,1167,1684,1268,1568,1612,1883,1911,729,1852,985,1798,1390,1280,955,542,593,233,343,1147,1889,1865,1266,1671,282,1327,188,1452,941,704,66,1576,1815,1704,712,1302,473,1267,470,57,819,1,401,1868,1669,1486,1349,915,490,534,1323,831,484,90,1488,1752,1003,1620,1091,127,1352,1763,1691,613,21,785,1511,120,1805,314,1771,1785,1667,788,794,1011,374,923,1731,42,1168,1537,204,968,1503,405,1884,1818,1973,1944,626,55,1698,831,1831,1800,1590,1193,807,1493,520,455,1812,385,1345,221,224,1871,169,606,1435,1423,160,1411,502,1857,388,604,203,1054,495,735,1823,1961,1949,1884,619,620,1197,216,1981,451,801,1820,146,111,1051,1698,984,1481,1525,1036,1264,1710,1722,1899,1020,674,1336,1766,1683,1651,1472,473,543,262,110,1701,574,846,527,1707,1463,1274,929,884,1533,838,1065,342,1137,1809,568,1459,633,492,493,1184,54,1279,1182,1473,1371,224,191,804,901,336,1395,492,606,1503,665,458,1400,611,1541,512,1378,1589,1140,669,1143,1191,640,799,792,1054,793,796,210,796,852,873,256,1599,254,1734,921,666,1317,1232,1752,16,72,1640,1466,1900,1871,1692,96,851,1595,290,1572,1259,327,1702,948,229,1483,1472,1857,332,1863,552,787,1303,308,247,1664,1129,404,1024,63,749,286,1624,1066,210,1063,313,978,713,1769,1374,1558,520,242,852,988,1484,1601,991,1765,235,496,1471,1543,753,1171,439,579,1917,378,921,984,121,988,794,583,1145,695,1596,1218,846,1738,919,254,1326,1463,1218,606,10,1626,1356,8,1629,89,1425,1884,117,1588,4,1752,1604,1140,203,1729,1348,1487,1449,1077,327,634,71,1555,110,593,1697,1082,45,700,508,824,547,770,1137,1727,967,374,770,1641,1404,134,1465,159,489,782,1511,1357,1145,755,889,1576,1951,1950,1499,1447,1733,1478,1927,416,556,1549,27,753,903,1987,360,1965,1811,877,425,1265,903,1033,382,1837,170,1432,666,233,1135,128,766,452,360,1827,1183,699,509,653,101,1714,204,1448,225,1004,1088,1821,1178,1769,688,1218,1340,172,869,798,776,499,1412,234,355,318,335,6,862,200,284,85,1849,1685,581,1348,685,1352,846,1491,1318,530,1740,746,1836,708,1507,921,715,656,1159,1848,982,539,694,1692,376,1681,1799,740,1356,1638,827,1982,1242,1513,276,64,1856,81,1873,671,897,468,1476,1985,1639,992,1389,1867,1780,1946,154,989,1871,1371,1699,1614,707,87,724,937,764,1514,552,1062,1998,831,1086,683,1290,964,678,1650,82,1103,141,53,1984,1803,365,1088,1604,559,1479,495,1382,1319,164,432,1473,487,420,1449,485,1175,1240,856,1605,219,1804,1401,1140,1879,899,246,1846,1010,604,546,164,740,1550,321,480,461,802,140,506,1612,1487,1175,577,450,76,745,1748,1888,1800,1757,947,180,1713,1490,438,102,1985,1446,934,255,1966,411,69,1912,857,483,1947,1759,189,1367,985,1640,246,823,1933,682,457,404,1264,307,1404,1253,98,215,1233,962,616,1798,375,1934,1440,776,707,667,256,1840,839,1675,223,1847,221,1447,1035,976,1008,1711,80,535,1009,314,286,782,1695,1581,1398,1305,275,1261,1786,1811,721,6,425,1791,500,1001,1744,1544,1366,774,1322,420,336,1401,1492,1462,338,1226,1538,1572,1430,1484,697,996,1880,650,1175,1432,418,1459,1196,870,1849,1748,1891,70,1512,1053,1944,1200,1521,1757,269,1938,482,229,353,1218,1477,1944,1698,1728,292,1660,1488,158,134,138,1523,40,1880,131,1388,1644,1195,1769,833,1107,207,1618,81,1929,99,460,1608,915,588,743,320,1170,1930,808,715,1013,1136,65,1701,1778,282,1153,1214,1532,305,266,1443,1664,254,1728,1560,921,1290,1746,1073,1163,1408,153,957,1602,1652,1114,613,924,1060,1526,325,1301,80,1872,6,1162,290,79,780,237,609,688,1060,1348,1407,1677,509,1811,1274,264,646,422,1393,1654,1810,699,735,1672,1586,104,1803,1119,294,644,1672,419,1387,1106,1385,1690,359,1931,1008,435,1671,1700,1828,1200,1019,1143,1726,1839,450,508,1335,1609,1274,1759,974,1698,1164,785,350,1440,642,622,388,193,1049,1358,463,280,749,169,1117,966,1306,1539,438,1311,1213,1128,1015,1259,127,1843,1871,381,168,1517,58,810,535,1278,1013,1070,1317,1226,1827,729,159,328,977,199,240,1592,971,350,410,684,975,1366,827,1757,707,1321,1086,712,447,428,1985,756,1741,335,1378,905,139,1273,223,1154,1249,1341,1347,1899,1135,329,137,1915,1980,1768,1692,288,1001,1455,1031,657,86,1680,1238,936,251,1869,1508,527,1133,1551,797,1343,650,996,917,381,1137,972,591,1308,928,1607,458,1519,1595,27,1174,88,1866,1598,1854,1844,1303};
  //int D[N]={1437,1371,1521,1536,1952,1312,541,810,1008,666,1797,852,1423,1130,1984,994,515,1716,1010,1988,876,517,1252,1983,490,307,92,1759,964,644,1738,24,1895,303,1571,1126,1534,154,1902,344,1917,1178,1732,1535,828,1268,1770,1993,1208,1775,442,509,1374,1536,353,38,1240,1908,1400,1261,413,689,1869,941,431,463,170,157,1767,1641,1052,18,1181,557,987,789,1842,62,1338,1840,771,1338,1208,1426,494,1683,653,1947,290,429,1238,1958,1172,441,147,1381,260,28,809,1565,1996,1495,264,1031,1824,1418,206,1386,49,226,415,1165,1069,1657,960,1708,524,27,1560,1480,886,1290,178,1089,110,845,81,1921,1324,1357,137,1299,1070,984,1451,535,1803,303,1624,1755,1005,1864,1248,1322,735,1466,1396,1006,330,35,1154,901,1816,1972,1243,1742,899,469,1860,901,1258,1446,779,518,1965,915,740,1720,1533,1681,1518,1788,40,1474,1448,1218,1659,482,655,872,710,1130,165,876,802,1489,1973,708,1032,232,267,448,84,1639,644,758,642,1556,854,1306,193,188,523,390,159,947,830,1925,230,559,770,1588,912,11,1875,870,1678,1977,1056,1898,1061,1975,1809,586,833,147,86,1153,850,796,1371,1034,1003,1524,750,78,514,701,907,685,1924,1532,1214,1085,774,84,103,1196,1092,1315,597,188,1773,793,407,1952,170,393,643,311,1117,715,1781,439,516,1412,627,1154,724,934,241,1294,513,429,1434,994,187,472,1962,1581,30,411,376,1144,1365,1984,650,1956,346,1979,446,1583,1369,1016,629,1870,467,1431,213,256,824,1359,1738,631,721,1757,669,821,205,14,1523,339,1997,1263,1300,493,1598,1575,1782,262,1656,112,1243,108,238,411,1945,702,1412,1155,215,805,1074,1123,1421,1285,1132,477,883,1816,973,118,1026,1193,368,133,1518,295,723,849,1913,1442,517,1902,1696,1588,1484,616,732,13,1764,884,1479,1849,1245,1342,249,930,1911,1211,87,1143,1004,905,198,757,889,1364,661,1837,908,695,520,473,879,1388,1205,145,1633,1180,1152,304,1966,1936,172,1362,414,1835,413,519,1636,1976,1950,659,1375,553,563,175,1662,1712,709,458,1018,1020,1762,1623,551,35,671,411,335,1525,213,1020,1055,476,589,368,1351,728,1719,1175,1256,1377,204,1314,272,606,525,1380,1403,1278,341,1710,1731,1924,87,745,919,1949,1922,381,934,1855,1979,1507,676,1601,1335,731,816,909,934,275,1538,1493,1339,24,1322,1682,912,696,405,1138,748,478,896,435,515,923,1925,151,150,1948,1238,839,121,875,1788,1995,1452,763,1860,1169,1987,1967,1641,490,1699,1947,1168,1735,109,1211,196,1660,1769,1202,1284,1987,479,1198,906,756,1155,797,112,933,644,922,535,365,1338,1186,1917,953,1848,324,1250,1894,1031,1290,1642,200,1381,834,946,1749,1347,1660,295,879,1513,1171,1744,922,1605,525,1220,1468,1239,204,657,771,887,1649,1963,1129,976,1879,1997,224,550,792,251,1806,1830,1233,1756,1763,33,523,1956,200,504,761,835,380,1337,1302,832,1817,47,876,361,1973,766,493,1947,709,1394,1220,19,308,1190,96,1364,16,411,70,289,1102,857,933,1203,1012,1600,1807,735,1533,413,110,1545,1942,869,1844,18,1012,545,1680,253,962,1931,1303,648,588,137,266,1166,701,1473,1160,58,1155,1688,844,66,313,863,1453,854,1151,835,1785,1352,232,852,862,1158,122,1124,981,378,89,1937,1237,609,1401,1893,1732,1344,122,52,505,1782,30,658,727,1010,1409,1753,1836,1902,330,645,1736,1390,1577,417,1706,1477,1739,162,387,132,650,1964,812,1266,1785,1974,990,234,755,585,1928,1460,1739,189,1974,261,139,1955,73,1186,1983,200,1066,1739,1504,571,1001,1000,468,376,1926,1126,679,1039,1143,265,627,598,46,1018,1976,1897,830,728,1018,5,1082,734,1592,1544,870,1510,751,1907,1939,271,62,621,1969,735,1396,1093,1129,1348,1489,1878,422,1545,1768,536,1272,1930,1479,143,989,679,1040,1543,1622,1042,18,1464,795,1956,1225,1315,528,910,440,1519,1028,1166,1968,469,709,359,347,260,975,1695,1823,141,999,1650,91,717,1380,1403,1470,749,1423,1710,1599,1086,1234,1841,1251,603,1866,567,378,1520,232,1265,1412,1248,906,1158,837,465,710,1407,559,1642,790,1448,1298,1974,1220,1153,693,1692,831,901,1778,900,570,1329,1000,1235,1083,460,1228,918,953,182,1532,1338,1247,826,501,1069,1377,1669,1913,1705,747,1373,672,1824,814,1025,694,812,1754,1073,1201,1278,1831,1673,713,1905,1658,201,878,1004,565,1077,1712,1729,1950,354,853,695,1322,253,915,1878,854,1650,1180,339,1144,1685,434,1383,1367,1691,367,29,41,1022,1595,139,1640,1801,563,522,783,1051,1151,472,606,1976,1742,962,289,699,1699,1256,1372,118,286,1243,1895,1681,1216,1641,901,1491,652,18,359,1438,736,639,827,1566,170,1109,1122,372,1609,307,1776,1404,887,384,1560,24,1821,1211,1908,297,1921,1906,490,735,785,1264,1529,1997,1321,341,1307,430,1839,30,1005,1635,925,1125,1140,854,1541,1636,1766,320,1728,119,1744,720,811,127,1156,1692,895,384,1167,596,1398,1058,1777,1052,784,757,123,1817,1469,716,1659,365,1298,396,904};
  //全クラスタを格納する配列CL
  double CL[N*2-1][4];
  double min_dist=10000;
  int tmp_i,tmp_j,tmp;

  //CL[i][0]:左側
  //CL[i][1]:右側
  //CL[i][2]:座標
  //CL[i][3]:削除フラグ、0は有効、1は削除、-1はクラスタ未作成
  //初期化。CL[0]~CL[N-1]にD[0]=D[N-1]を入れる
  //CL[i][2]にはそのノードの座標を入れる
  //n次元拡張ふええ
  //CL[i][2]を別変数にする
  double pos[N*2][M];
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
    pos[i][j]=D[i][j];
    }
  }

  //初期化。フラグを未使用にする
  //葉の次の要素を-1に設定する(無効にする)
  for(int i=0;i<N;i++){
    CL[i][3]=0;
    CL[i+N][3]=-1;
    CL[i][0]=CL[i][1]=-1;
  }


  //min_distの設定
  //十分大きい数値にすればいい
  //CLの最大値にする？
  //これいらない疑惑
  //if(CL[i][2]<min_dist)min_dist=CL[i][2];
  //最短距離のノードを求める
  //min_dist=1000;


  //デンドログラムの作成
  dendrogram(CL,pos,min_dist);

  
  //表示
  cout << "新しく生成したクラスタとそのクラスタの子クラスタの番号" << endl;
  for(int i=0;i<N*2-1;i++){
    cout << i  << ":"  << CL[i][0] << ","  << CL[i][1] << endl;
  }

  int C[N]={0};
  cut(C,CL,D);

  for(int i=0;i<N;i++){
    cout << C[i] << endl;
  }

  return 0;
}


//距離
double dist(double x1[M],double x2[M]){
  double sum=0;
  for(int i=0;i<M;i++){
    sum+=pow((x1[i]-x2[i]),2);
  }
  return sqrt(sum);
}

//新しいクラスタの中央値を決める
//グループ平均法の実装したい
void center(double x1[M],double x2[M],double pos[N]){
  for(int i=0;i<M;i++){
    pos[i]=fabs(x1[i]+x2[i])/2.0;
  }
}

//引数で指定されたノードの親を求める
int parent(int c,double CL[N*2-1][4],double D[N][M]){
  int c1=CL[N*2-2][1];
  int c2=CL[N*2-2][0];
  int p;
    for(int i=N;i<N*2-1;i++){
      for(int j=0;j<2;j++){
        if(CL[i][j]==c){
          p=i;
        }
      }
    }
  return p;

}

void dendrogram(double CL[N*2-1][4],double pos[N*2][M], double min_dist){
  int tmp_i,tmp_j;
//デンドログラムを求める
  //形式は以下
  //配列CL[i]の[0][1]は自分の子要素を表し、
  //[2]はそのノードが持つ値
  //[3]はフラグ
  //CL[N]~CL[N*2-1]が求めるノード
  //最小の距離の差とその組み合わせを求める
  //削除はどうしよう。削除されたやつはスキップする？フラグがいる？
  //同じ距離の場合は右側にあるものが採用される
  //ああ違う。飛ばされるCLがある。
  //ああ、ああ、ああ、ああ、ああ、ああ、ああ
  //配列操作で木構造をよしなに
  //デンドログラムの作成はだいたい成功してる
  for(int k=N;k<N*2-1;k++){
  for(int i=0;i<N*2-1;i++){
    for(int j=i+1;j<N*2;j++){
      if(k!=i && k!= j && CL[i][3]==0 && CL[j][3]==0 && dist(pos[i],pos[j])<=min_dist){
        //min_dist=dist(CL[i][2],CL[j][2]);
        min_dist=dist(pos[i],pos[j]);
        //新しいクラスタ候補の作成
        CL[k][0]=i;
        CL[k][1]=j;
        CL[k][3]=0;
        tmp_i=i;
        tmp_j=j;
      }
    }
  }
  //最小が確定したところでフラグを立てる
  CL[tmp_i][3]=1;
  CL[tmp_j][3]=1;
  //ノードに値の代入
  center(pos[tmp_i],pos[tmp_j],pos[k]);
  min_dist=1000;
  }
}


void cut(int C[N],double CL[N*2-1][4],double D[N][M]){
  //切り出し部分
  //こっからN以下の数値を取り出す
  //contain判定
  //モジュール化したい
  //うまく実装できてねえじゃねえか
  //初期化
  //C[N]={0};
  int p;

  //for(int i=0;i<N*2-2;i++){
  //  cout <<"i:"<<i<< ",p:" << parent(i,CL,D) << endl;
  //}

  //切り出し
  //親をたどって根の子要素にあたるか根にあたるかしたら抜ける
  vector<int> index;
  for(int i=0;i<N;i++){
    p=parent(i,CL,D);
    while(true){
      if(p==CL[N*2-2][0]){
        index.push_back(i);
        break;
      }else if(p==CL[N*2-2][1]){
        break;
      }else if(p==N*2-2){
        index.push_back(i);
        break;
      }
      p=parent(p,CL,D);
    }
  }
  for(int i=0;i<index.size();i++){
    C[index[i]]=1;
  }
  //切り出しここまで
}

